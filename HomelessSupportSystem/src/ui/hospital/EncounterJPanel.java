/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.hospital;

import business.EcoSystem;
import business.healthcare.VitalSigns;
import business.individuals.HomelessIndividual;
import business.individuals.Individual;
import business.useraccount.UserAccount;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anu61
 */
public class EncounterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EncounterJPanel
     */
    private final JPanel container;
    private final UserAccount account;
    private final EcoSystem system;
    private final List<UserAccount> hls;
    
    public EncounterJPanel(JPanel container, UserAccount account, EcoSystem system) {
        initComponents();
        this.container = container;
        this.account = account;
        this.system = system;        
        
        this.hls = system.getShelterMonitoringEnterprise().getAllHomelessIndividuals();
        
        patientCBox.removeAllItems();
        
        for (UserAccount ua: hls) {
            patientCBox.addItem(ua.getIndividual().getName());
        }
        
        encounterTable.setShowHorizontalLines(true);
        encounterTable.setShowVerticalLines(true);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        patientCBox = new javax.swing.JComboBox<>();
        spo2Text = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        sbpText = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        dbpText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        heartRateText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        temperatureText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();

        jLabel6.setText("Temperature");

        jLabel7.setText("Blood Oxygen Level");

        patientCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Patient - ");

        addButton.setBackground(new java.awt.Color(38, 55, 85));
        addButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 204));
        addButton.setText("Add New Encounter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Systolic Blood Pressure");

        updateButton.setBackground(new java.awt.Color(38, 55, 85));
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 204));
        updateButton.setText("Update Selected Encounter");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(38, 55, 85));
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 204));
        deleteButton.setText("Delete Selected Encounter");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        dbpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbpTextActionPerformed(evt);
            }
        });

        jLabel4.setText("Diastolic Blood Pressure");

        jLabel5.setText("Heart Rate");

        encounterTable.setBackground(new java.awt.Color(253, 253, 223));
        encounterTable.setBorder(new javax.swing.border.MatteBorder(null));
        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "BP", "Heart Rate", "Temperature", "SPO2", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(encounterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patientCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(temperatureText, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(heartRateText, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(dbpText, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(sbpText, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                            .addComponent(spo2Text))))
                .addContainerGap(484, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(patientCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sbpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dbpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(heartRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(temperatureText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(spo2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(updateButton))
                .addContainerGap(231, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCBoxActionPerformed
        // TODO add your handling code here:
        int idx = patientCBox.getSelectedIndex();
        if (idx < 0)
            return;
        
        UserAccount ua = hls.get(idx);
        Individual ind = ua.getIndividual();
        if (ind instanceof HomelessIndividual) {
            HomelessIndividual hi = (HomelessIndividual) ind;
            populateEncountersTable(hi.getVitalSignsDirectory().getVitalSignsList());
        }

    }//GEN-LAST:event_patientCBoxActionPerformed
      public HomelessIndividual getCurrentPatient() {
        int idx = patientCBox.getSelectedIndex();
        if (idx < 0)
            return null;
        
        UserAccount ua = hls.get(idx);
        Individual ind = ua.getIndividual();
        if (ind instanceof HomelessIndividual) {
            HomelessIndividual hi = (HomelessIndividual) ind;
            return hi;
        }
        
        return null;
    }
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        HomelessIndividual curPatient = getCurrentPatient();
        if (curPatient == null) {
            JOptionPane.showMessageDialog(this, "Please select a patient from the box at the top.");
            return;
        }

        VitalSigns vt = parseVitalSigns();
        if (vt == null)
        return;

        if(curPatient.getVitalSignsDirectory().getVitalSignsList().add(vt)) {
            JOptionPane.showMessageDialog(this, "Encounter added successfully.");
            populateEncountersTable(curPatient.getVitalSignsDirectory().getVitalSignsList());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        HomelessIndividual curPatient = getCurrentPatient();
        if (curPatient == null) {
            JOptionPane.showMessageDialog(this, "Please select a patient from the box at the top.");
            return;
        }
        
        int selectedRow = encounterTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted.");
            return;
        }
        
        VitalSigns vt = parseVitalSigns();
        if (vt == null) 
            return;
        VitalSigns prev = curPatient.getVitalSignsDirectory().getVitalSignsList().get(selectedRow);
        vt.setDate(prev.getDate());
        curPatient.getVitalSignsDirectory().getVitalSignsList().set(selectedRow, vt);
        JOptionPane.showMessageDialog(this, "Vital signs reading updated successfully.");
        populateEncountersTable(curPatient.getVitalSignsDirectory().getVitalSignsList());
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
       HomelessIndividual curPatient = getCurrentPatient();
        if (curPatient == null) {
            JOptionPane.showMessageDialog(this, "Please select a patient from the box at the top.");
            return;
        }
        
        int selectedRow = encounterTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted.");
            return;
        }
        
        curPatient.getVitalSignsDirectory().getVitalSignsList().remove(selectedRow);
        JOptionPane.showMessageDialog(this, "Selected vital sign reading was deleted.");
        populateEncountersTable(curPatient.getVitalSignsDirectory().getVitalSignsList());
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void dbpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbpTextActionPerformed
    private void populateEncountersTable(List<VitalSigns> vtLi) {
        Collections.sort(vtLi);
        DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        model.setRowCount(0);
        for (VitalSigns vt: vtLi) {
            Object[] row = new Object[5];
            row[0] = ((int)vt.getDbp()) + "/" + ((int)vt.getSbp());
            row[1] = vt.getHeartRate();
            row[2] = vt.getTemperature();
            row[3] = vt.getSpo2();
            row[4] = vt.getDate();
            model.addRow(row);
        }
    }
    
     private VitalSigns parseVitalSigns() {
        VitalSigns vt = new VitalSigns();
        
        if (vt.setSbp(sbpText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Systolic Blood Pressure is not in the correct format.");
            return null;
        }
        
        if (vt.setDbp(dbpText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Diastolic Blood Pressure is not in the correct format.");
            return null;
        }
        
        if (vt.setHeartRate(heartRateText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Heart Rate is not in the correct format.");
            return null;
        }
        
        if (vt.setTemperature(temperatureText.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Temperature is not in the correct format.");
            return null;
        }
        
        if (vt.setSpo2(spo2Text.getText().trim()) == false) {
            JOptionPane.showMessageDialog(this, "Blood Oxygen Level is not in the correct format.");
            return null;
        }
        
        return vt;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField dbpText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable encounterTable;
    private javax.swing.JTextField heartRateText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> patientCBox;
    private javax.swing.JTextField sbpText;
    private javax.swing.JTextField spo2Text;
    private javax.swing.JTextField temperatureText;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
