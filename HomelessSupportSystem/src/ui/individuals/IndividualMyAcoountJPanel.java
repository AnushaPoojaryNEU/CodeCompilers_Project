/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.individuals;

import business.EcoSystem;
import business.employee.Employee;
import business.enterprise.Enterprise;
import business.individuals.Individual;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anu61
 */
public class IndividualMyAcoountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form IndividualMyAcoountJPanel
     */
    EcoSystem ecoSystem;
    JPanel rightJPanel;
    Individual individual;
    UserAccount userAccount;
    ArrayList<Enterprise> facilityList;
    boolean flag = false;
    
    
    public IndividualMyAcoountJPanel(JPanel rightJPanel, UserAccount userAccount, WorkRequest workRequest, Individual individual, ArrayList<Enterprise> facilityList) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.individual = individual;
        this.facilityList = facilityList;
        this.userAccount = userAccount;
        txtFirstName.setText(individual.getFirstName());
        txtLastName.setText(individual.getLastName());
        txtUsername.setText(individual.getUserName());

        txtFirstName.setEnabled(false);
        txtLastName.setEnabled(false);
        txtUsername.setEnabled(false);
        
         this.populateRequests();
         this.populateFacilities();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        Password = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jConfirmPasswordField = new javax.swing.JPasswordField();
        btnUpdate = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RequestTable = new javax.swing.JTable();
        btnRequestFacility = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        FacilityTable = new javax.swing.JTable();
        btnFeedback = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setText("My Account");

        jLabel2.setText("FirstName:");

        jLabel3.setText("LastName:");

        jLabel4.setText("UserName:");

        Password.setText("Password:");

        jLabel6.setText("Confirm Password:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel5.setText("Available Facility:");

        RequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Registration ID", "Sender", "Status", "Rating"
            }
        ));
        jScrollPane1.setViewportView(RequestTable);
        if (RequestTable.getColumnModel().getColumnCount() > 0) {
            RequestTable.getColumnModel().getColumn(1).setResizable(false);
        }

        btnRequestFacility.setText("Request facility");
        btnRequestFacility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestFacilityActionPerformed(evt);
            }
        });

        FacilityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Facility Name"
            }
        ));
        jScrollPane2.setViewportView(FacilityTable);

        btnFeedback.setText("Add Feedback");
        btnFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFeedbackActionPerformed(evt);
            }
        });

        jLabel7.setText("My Request:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btnUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Password)
                                    .addGap(18, 18, 18)
                                    .addComponent(jPasswordField))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jConfirmPasswordField)))
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFeedback)
                            .addComponent(btnRequestFacility))))
                .addContainerGap(145, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(295, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Password)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(34, 34, 34)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(btnRequestFacility)
                .addGap(55, 55, 55)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFeedback)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(380, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(179, 179, 179)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestFacilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestFacilityActionPerformed
        // TODO add your handling code here:
        int selectedRow = FacilityTable.getSelectedRow();
        UserAccount selectedUserAccount = null;
        if (selectedRow >= 0) {
            
            for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {
                if (!wr.getStatus().equalsIgnoreCase("Completed")) {
                    flag = true;
                    break;
                }
            }
            if(flag){
                JOptionPane.showMessageDialog(null, "Your previous request is still in processing mode. You cannot request another facility.");
                return;
            }
            
            
            
            Enterprise enteprise = (Enterprise) FacilityTable.getValueAt(selectedRow, 0);
            Iterator empIterator = enteprise.getEmpMap().entrySet().iterator();

            while (empIterator.hasNext()) {
                Map.Entry mapElement = (Map.Entry) empIterator.next();
                Employee e = ((Employee) mapElement.getKey());
                UserAccount ua = ((UserAccount) mapElement.getValue());
                if (ua.getRoleType().getValue().equals("Reviewer")) {
                    selectedUserAccount = ua;
                    break;
                }
            }
            if (selectedUserAccount == null) {
                JOptionPane.showMessageDialog(null, "Oops!! We cannot process your request at this time");
                return;
            } else {
                WorkRequest workRequest = new WorkRequest();
                workRequest.setSender(userAccount);
                workRequest.setStatus("Requested Facility");
                workRequest.setMessage("");
                workRequest.setIndividual(individual);
                JOptionPane.showMessageDialog(null, "Facility Requested Successfully!!. Please keep a track of your request present in 'MyAccount' section");
                userAccount.getWorkQueue().getWorkRequestList().add(workRequest);
                selectedUserAccount.getWorkQueue().getWorkRequestList().add(workRequest);
               
                populateRequests();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a facility");
        }

    }//GEN-LAST:event_btnRequestFacilityActionPerformed

    private void btnFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFeedbackActionPerformed
        // TODO add your handling code here:
          int selectedRow = RequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) RequestTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    WorkRequest wr = w;

                    if (wr.getStatus().equals("Completed") || wr.getStatus().equalsIgnoreCase("Request Completed")) {
                        FeedbackJPanel feedbackJPanel = new FeedbackJPanel(rightJPanel, userAccount, wr, individual, facilityList);
                        rightJPanel.add("FeedbackJPanel", feedbackJPanel);
                        CardLayout layout = (CardLayout) rightJPanel.getLayout();
                        layout.next(rightJPanel);
                    }else{
                        JOptionPane.showMessageDialog(null, "You cannot provide feedback for this request");
                        return;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to proceed");
        }
    }//GEN-LAST:event_btnFeedbackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (passwordPatternCorrect()) {
            if (String.valueOf(jPasswordField.getPassword()).equals(String.valueOf(jConfirmPasswordField.getPassword()))) {
                userAccount.setPassword(String.valueOf(jPasswordField.getPassword()));
                JOptionPane.showMessageDialog(null, "Password Updated Successfully!!");
                this.jPasswordField.setText("");
                this.jConfirmPasswordField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Password and Confirm Password do not match.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter valid password");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FacilityTable;
    private javax.swing.JLabel Password;
    private javax.swing.JTable RequestTable;
    private javax.swing.JButton btnFeedback;
    private javax.swing.JButton btnRequestFacility;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPasswordField jConfirmPasswordField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void populateRequests() {
        DefaultTableModel model = (DefaultTableModel) RequestTable.getModel();
        model.setRowCount(0);

        for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = wr.getIndividual().getRegistrationId();
            row[1] = wr.getSender();
            row[2] = wr.getStatus();
            row[3] = wr.getRating();
            model.addRow(row);
    }
    }

    private void populateFacilities() {
        DefaultTableModel model = (DefaultTableModel) FacilityTable.getModel();
        model.setRowCount(0);
        for (Enterprise e : facilityList) {
            Object[] row = new Object[1];
            row[0] = e;
            model.addRow(row);
    }
    }

    private boolean passwordPatternCorrect() {
         Pattern q = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=_])(?=\\S+$).{6,20}$");
        Matcher n = q.matcher(String.valueOf(jPasswordField.getPassword()));
        Boolean c = n.matches();
        return c;
    }

//    private void populateData() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }
}
