/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.doctor;

import business.enterprise.Enterprise;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dwith
 */
public class DoctorWorkAreaJPanel extends javax.swing.JFrame {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    WorkRequest wr;
    Enterprise enterprise;
    
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount,Enterprise enterprise) {
        initComponents();
        this.enterprise=enterprise;
        this.userAccount= userAccount;
        this.userProcessContainer= userProcessContainer;
        this.populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        manageApplicantsJTable = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        btnDecline = new javax.swing.JButton();
        btnSchedule = new javax.swing.JButton();
        btnData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("DOCTOR WORK AREA");

        manageApplicantsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Registration ID", "Applicant Name", "Sender", "Status"
            }
        ));
        jScrollPane1.setViewportView(manageApplicantsJTable);

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnDecline.setText("Decline");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });

        btnSchedule.setText("Schedule Appointment");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        btnData.setText("Provide Data");
        btnData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(148, 148, 148)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(96, 96, 96)
                            .addComponent(btnAccept)
                            .addGap(31, 31, 31)
                            .addComponent(btnDecline)
                            .addGap(76, 76, 76)
                            .addComponent(btnSchedule))))
                .addGap(51, 51, 51)
                .addComponent(btnData)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(btnData, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecline, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Requested to Doctor")) {
                        wr.setStatus("Accepted");
                        JOptionPane.showMessageDialog(null, "Request Accepted by doctor " + this.userAccount);
                        this.populateTable();

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot accept this work request");
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to accept");
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsJTable.getSelectedRow();
        //  UserAccount selectedUserAccount = null;
        if (selectedRow >= 0) {
            Integer registrationId = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {
                if (wr.getIndividual().getRegistrationId() == registrationId) {
                    if (wr.getStatus().equalsIgnoreCase("Requested to Doctor")) {
                        wr.setStatus("Declined");
                        wr.setSender(userAccount);
                        JOptionPane.showMessageDialog(null, "Request Declined successfully");
                        populateTable();
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot decline this request");
                    }
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to take action.");
        }
    }//GEN-LAST:event_btnDeclineActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Accepted")) {
                        // wr.setStatus("Appointment Scheduled");
                        // JOptionPane.showMessageDialog(null, "R " + this.userAccount);
                        //   this.populateTable();  
                        AppointmentJPanel appointmentJPanel = new AppointmentJPanel(userProcessContainer, userAccount, wr,enterprise);
                        userProcessContainer.add("appointmentJPanel", appointmentJPanel);

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot schedule an apointment for " + wr.getIndividual().getFirstName() + " " + wr.getIndividual().getLastName());
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to schedule appointment");
        }
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void btnDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataActionPerformed
        // TODO add your handling code here:
         int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Appointment Confirmed")) {
                        // wr.setStatus("Appointment Scheduled");
                        // JOptionPane.showMessageDialog(null, "R " + this.userAccount);
                        //   this.populateTable();  
                        IndividualReportJPanel reportJPanel = new IndividualReportJPanel(userProcessContainer, userAccount, wr,enterprise);
                        userProcessContainer.add("reportJPanel", reportJPanel);

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot check/generate report for " + wr.getIndividual().getFirstName() + " " + wr.getIndividual().getLastName());
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to view/generate report");
        }
    }//GEN-LAST:event_btnDataActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnData;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageApplicantsJTable;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) manageApplicantsJTable.getModel();
        dtm.setRowCount(0);
        if (this.userAccount.getWorkQueue().getWorkRequestList().size() > 0) {
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual() != null) {
                    Object row[] = new Object[5];
                    row[0] = w.getIndividual().getRegistrationId();
                    row[1] = w.getIndividual().getFirstName() + " " + w.getIndividual().getLastName();
                    row[2] = w.getSender();
                    row[3] = w.getStatus();
                    dtm.addRow(row);
                }

            }
        }
}
}